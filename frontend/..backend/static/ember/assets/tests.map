{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","frontend/tests/acceptance/volunteers-test.js","frontend/tests/app.lint-test.js","frontend/tests/helpers/destroy-app.js","frontend/tests/helpers/ember-power-select.js","frontend/tests/helpers/module-for-acceptance.js","frontend/tests/helpers/start-app.js","frontend/tests/test-helper.js","frontend/tests/tests.lint-test.js","frontend/tests/unit/adapters/application-test.js","frontend/tests/unit/controllers/application-test.js","frontend/tests/unit/controllers/login-test.js","frontend/tests/unit/routes/application-test.js","frontend/tests/unit/routes/home-test.js","frontend/tests/unit/routes/home1-test.js","frontend/tests/unit/routes/index-test.js","frontend/tests/unit/routes/itemstotal-test.js","frontend/tests/unit/routes/login-test.js","frontend/tests/unit/routes/trackdonations-test.js","frontend/tests/unit/services/auth-manager-test.js","frontend/tests/unit/services/constants-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('frontend/tests/acceptance/volunteers-test', ['qunit', 'frontend/tests/helpers/start-app'], function (_qunit, _startApp) {\n  'use strict';\n\n  var application;\n  var originalConfirm;\n  var confirmCalledWith;\n\n  (0, _qunit.module)('Acceptance: Volunteer', {\n    beforeEach: function beforeEach() {\n      application = (0, _startApp.default)();\n      originalConfirm = window.confirm;\n      window.confirm = function () {\n        confirmCalledWith = [].slice.call(arguments);\n        return true;\n      };\n    },\n    afterEach: function afterEach() {\n      Ember.run(application, 'destroy');\n      window.confirm = originalConfirm;\n      confirmCalledWith = null;\n    }\n  });\n\n  (0, _qunit.test)('visiting /volunteers without data', function (assert) {\n    visit('/volunteers');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'volunteers.index');\n      assert.equal(find('#blankslate').text().trim(), 'No Volunteers found');\n    });\n  });\n\n  (0, _qunit.test)('visiting /volunteers with data', function (assert) {\n    server.create('volunteer');\n    visit('/volunteers');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'volunteers.index');\n      assert.equal(find('#blankslate').length, 0);\n      assert.equal(find('table tbody tr').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('create a new volunteer', function (assert) {\n    visit('/volunteers');\n    click('a:contains(New Volunteer)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'volunteers.new');\n\n      fillIn('label:contains(Vol number) input', 'MyString');\n      fillIn('label:contains(Lname) input', 'MyString');\n      fillIn('label:contains(Fname) input', 'MyString');\n      fillIn('label:contains(Vol dob) input', new Date());\n      fillIn('label:contains(Address) input', 'MyString');\n      fillIn('label:contains(City) input', 'MyString');\n      fillIn('label:contains(State) input', 'MyString');\n      fillIn('label:contains(Zipcode) input', 'MyString');\n      fillIn('label:contains(Email) input', 'MyString');\n      fillIn('label:contains(Cell phone) input', 'MyString');\n      fillIn('label:contains(Vol notes) input', 'MyString');\n\n      click('input:submit');\n    });\n\n    andThen(function () {\n      assert.equal(find('#blankslate').length, 0);\n      assert.equal(find('table tbody tr').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('update an existing volunteer', function (assert) {\n    server.create('volunteer');\n    visit('/volunteers');\n    click('a:contains(Edit)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'volunteers.edit');\n\n      fillIn('label:contains(Vol number) input', 'MyString');\n      fillIn('label:contains(Lname) input', 'MyString');\n      fillIn('label:contains(Fname) input', 'MyString');\n      fillIn('label:contains(Vol dob) input', new Date());\n      fillIn('label:contains(Address) input', 'MyString');\n      fillIn('label:contains(City) input', 'MyString');\n      fillIn('label:contains(State) input', 'MyString');\n      fillIn('label:contains(Zipcode) input', 'MyString');\n      fillIn('label:contains(Email) input', 'MyString');\n      fillIn('label:contains(Cell phone) input', 'MyString');\n      fillIn('label:contains(Vol notes) input', 'MyString');\n\n      click('input:submit');\n    });\n\n    andThen(function () {\n      assert.equal(find('#blankslate').length, 0);\n      assert.equal(find('table tbody tr').length, 1);\n    });\n  });\n\n  (0, _qunit.test)('show an existing volunteer', function (assert) {\n    server.create('volunteer');\n    visit('/volunteers');\n    click('a:contains(Show)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'volunteers.show');\n\n      assert.equal(find('p strong:contains(Vol number:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Lname:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Fname:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Vol dob:)').next().text(), new Date());\n      assert.equal(find('p strong:contains(Address:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(City:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(State:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Zipcode:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Email:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Cell phone:)').next().text(), 'MyString');\n      assert.equal(find('p strong:contains(Vol notes:)').next().text(), 'MyString');\n    });\n  });\n\n  (0, _qunit.test)('delete a volunteer', function (assert) {\n    server.create('volunteer');\n    visit('/volunteers');\n    click('a:contains(Remove)');\n\n    andThen(function () {\n      assert.equal(currentPath(), 'volunteers.index');\n      assert.deepEqual(confirmCalledWith, ['Are you sure?']);\n      assert.equal(find('#blankslate').length, 1);\n    });\n  });\n});","define('frontend/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('initializers/auth-manager.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/auth-manager.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('initializers/constants.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/constants.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('mixins/donations/save-model-mixin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'mixins/donations/save-model-mixin.js should pass ESLint\\n\\n10:9 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('mixins/donors/save-model-mixin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'mixins/donors/save-model-mixin.js should pass ESLint\\n\\n10:9 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('mixins/donors1/save-model-mixin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'mixins/donors1/save-model-mixin.js should pass ESLint\\n\\n10:9 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('mixins/inventories/save-model-mixin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'mixins/inventories/save-model-mixin.js should pass ESLint\\n\\n10:9 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('mixins/inventories1/save-model-mixin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'mixins/inventories1/save-model-mixin.js should pass ESLint\\n\\n10:9 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('mixins/volunteers/save-model-mixin.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'mixins/volunteers/save-model-mixin.js should pass ESLint\\n\\n11:9 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('models/donation.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/donation.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/donor.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/donor.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/inventory.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/inventory.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/volunteer.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/volunteer.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/donations/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/donations/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/donations/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/donations/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/donations/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/donations/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/donors/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/donors/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/donors/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/donors/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/donors/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/donors/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/donors/trackdonations.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/donors/trackdonations.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/donors1/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/donors1/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/donors1/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/donors1/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/donors1/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/donors1/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/home.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/home.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/home1.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/home1.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/inventories/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/inventories/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/inventories/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/inventories/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/inventories/itemstotal.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/inventories/itemstotal.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/inventories/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/inventories/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/inventories1/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/inventories1/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/inventories1/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/inventories1/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/inventories1/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/inventories1/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/volunteers/edit.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/volunteers/edit.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/volunteers/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/volunteers/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/volunteers/new.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/volunteers/new.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/auth-manager.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'services/auth-manager.js should pass ESLint\\n\\n61:9 - Unexpected console statement. (no-console)\\n73:3 - Unexpected console statement. (no-console)\\n77:5 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('services/constants.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/constants.js should pass ESLint\\n\\n');\n  });\n});","define('frontend/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    Ember.run(application, 'destroy');\n    if (window.server) {\n      window.server.shutdown();\n    }\n  }\n});","define('frontend/tests/helpers/ember-power-select', ['exports', 'ember-power-select/test-support/helpers'], function (exports, _helpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.selectChoose = exports.touchTrigger = exports.nativeTouch = exports.clickTrigger = exports.typeInSearch = exports.triggerKeydown = exports.nativeMouseUp = exports.nativeMouseDown = exports.findContains = undefined;\n  exports.default = deprecatedRegisterHelpers;\n\n\n  function deprecateHelper(fn, name) {\n    return function () {\n      (true && !(false) && Ember.deprecate('DEPRECATED `import { ' + name + ' } from \\'../../tests/helpers/ember-power-select\\';` is deprecated. Please, replace it with `import { ' + name + ' } from \\'ember-power-select/test-support/helpers\\';`', false, { until: '1.11.0', id: 'ember-power-select-test-support-' + name }));\n\n      return fn.apply(undefined, arguments);\n    };\n  }\n\n  var findContains = deprecateHelper(_helpers.findContains, 'findContains');\n  var nativeMouseDown = deprecateHelper(_helpers.nativeMouseDown, 'nativeMouseDown');\n  var nativeMouseUp = deprecateHelper(_helpers.nativeMouseUp, 'nativeMouseUp');\n  var triggerKeydown = deprecateHelper(_helpers.triggerKeydown, 'triggerKeydown');\n  var typeInSearch = deprecateHelper(_helpers.typeInSearch, 'typeInSearch');\n  var clickTrigger = deprecateHelper(_helpers.clickTrigger, 'clickTrigger');\n  var nativeTouch = deprecateHelper(_helpers.nativeTouch, 'nativeTouch');\n  var touchTrigger = deprecateHelper(_helpers.touchTrigger, 'touchTrigger');\n  var selectChoose = deprecateHelper(_helpers.selectChoose, 'selectChoose');\n\n  function deprecatedRegisterHelpers() {\n    (true && !(false) && Ember.deprecate(\"DEPRECATED `import registerPowerSelectHelpers from '../../tests/helpers/ember-power-select';` is deprecated. Please, replace it with `import registerPowerSelectHelpers from 'ember-power-select/test-support/helpers';`\", false, { until: '1.11.0', id: 'ember-power-select-test-support-register-helpers' }));\n\n    return (0, _helpers.default)();\n  }\n\n  exports.findContains = findContains;\n  exports.nativeMouseDown = nativeMouseDown;\n  exports.nativeMouseUp = nativeMouseUp;\n  exports.triggerKeydown = triggerKeydown;\n  exports.typeInSearch = typeInSearch;\n  exports.clickTrigger = clickTrigger;\n  exports.nativeTouch = nativeTouch;\n  exports.touchTrigger = touchTrigger;\n  exports.selectChoose = selectChoose;\n});","define('frontend/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'frontend/tests/helpers/start-app', 'frontend/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Ember.RSVP.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n});","define('frontend/tests/helpers/start-app', ['exports', 'frontend/app', 'frontend/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var attributes = Ember.merge({}, _environment.default.APP);\n    attributes.autoboot = true;\n    attributes = Ember.merge(attributes, attrs); // use defaults, but you can override;\n\n    return Ember.run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('frontend/tests/test-helper', ['frontend/app', 'frontend/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('frontend/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('acceptance/volunteers-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/volunteers-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/home-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/home-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/home1-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/home1-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/itemstotal-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/itemstotal-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/trackdonations-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/trackdonations-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/auth-manager-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/auth-manager-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/constants-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/constants-test.js should pass ESLint\\n\\n');\n  });\n});","define('frontend/tests/unit/adapters/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['serializer:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n});","define('frontend/tests/unit/controllers/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:application', 'Unit | Controller | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('frontend/tests/unit/controllers/login-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('controller:login', 'Unit | Controller | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n});","define('frontend/tests/unit/routes/application-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:application', 'Unit | Route | application', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('frontend/tests/unit/routes/home-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:home', 'Unit | Route | home', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('frontend/tests/unit/routes/home1-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:home1', 'Unit | Route | home1', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('frontend/tests/unit/routes/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('frontend/tests/unit/routes/itemstotal-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:itemstotal', 'Unit | Route | itemstotal', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('frontend/tests/unit/routes/login-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:login', 'Unit | Route | login', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('frontend/tests/unit/routes/trackdonations-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:trackdonations', 'Unit | Route | trackdonations', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('frontend/tests/unit/services/auth-manager-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:auth-manager', 'Unit | Service | auth manager', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('frontend/tests/unit/services/constants-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:constants', 'Unit | Service | constants', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","require('frontend/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsppOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;","file":"tests.js"}